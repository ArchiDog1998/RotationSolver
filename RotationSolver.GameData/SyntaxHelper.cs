using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Security.Cryptography;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace RotationSolver.GameData;

public static class SyntaxHelper
{
    public static AttributeListSyntax GeneratedCodeAttribute(Type generator)
    {
        return AttributeList(SingletonSeparatedList(Attribute(IdentifierName("global::System.CodeDom.Compiler.GeneratedCode"))
           .AddArgumentListArguments(
               AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(generator.FullName ?? generator.Name))),
               AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(generator.Assembly.GetName().Version?.ToString() ?? "1.0.0"))))));
    }

    public static EnumMemberDeclarationSyntax EnumMember(string name, ushort value)
    {
        return EnumMemberDeclaration(name)
            .WithEqualsValue(EqualsValueClause(LiteralExpression(SyntaxKind.NumericLiteralExpression, Literal(value))));
    }

    public static AttributeSyntax DescriptionAttribute(string description)
    {
        var attributeArgument = AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(description)));
        return Attribute(IdentifierName("global::System.ComponentModel.Description"), AttributeArgumentList(SingletonSeparatedList(attributeArgument)));
    }

    public static TSyntax WithXmlComment<TSyntax>(this TSyntax node, string comment)
        where TSyntax : SyntaxNode
    {
        return node.WithLeadingTrivia(TriviaList([.. comment.Split('\n').Select(Comment)]));
    }

    public static BaseNamespaceDeclarationSyntax NamespaceDeclaration(string name)
    {
        return FileScopedNamespaceDeclaration(ParseName(name))
            .WithLeadingTrivia(TriviaList(
                Comment("// <auto-generated/>"),
                Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)),
                Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true))));
    }

    public static async Task SaveNode(SyntaxNode node, DirectoryInfo dirInfo, string name)
    {
        await using var streamWriter = new StreamWriter(dirInfo.FullName + $"\\RotationSolver.SourceGenerators\\Resources\\{name}.txt", false);
        node.NormalizeWhitespace().WriteTo(streamWriter);
    }
}
